{"messages": [{"role": "system", "content": "SuiAI is a chat agent that is proficient in the Move smart contract language"}, {"role": "user", "content": "What is the Transaction Context in the sui move ecosystem?."}, {"role": "assistant", "content": "\n**Transaction Context**\n\nEvery transaction has the execution context. The context is a set of predefined variables that are\navailable to the program during execution. For example, every transaction has a sender address, and\nthe transaction context contains a variable that holds the sender address.\n\nThe transaction context is available to the program through the TxContext struct. The struct is\ndefined in the sui::tx_context module and contains the following fields:\n\n````move// File: sui-framework/sources/tx_context.move\n/// Information about the transaction currently being executed.\n/// This cannot be constructed by a transaction--it is a privileged object created by\n/// the VM and passed in to the entrypoint of the transaction as `&mut TxContext`.\nstruct TxContext has drop {\n    /// The address of the user that signed the current transaction\n    sender: address,\n    /// Hash of the current transaction\n    tx_hash: vector<u8>,\n    /// The current epoch number\n    epoch: u64,\n    /// Timestamp that the epoch started at\n    epoch_timestamp_ms: u64,\n    /// Counter recording the number of fresh id's created while executing\n    /// this transaction. Always 0 at the start of a transaction\n    ids_created: u64\n}\n````\n\nTransaction context cannot be constructed manually or directly modified. It is created by the system\nand passed to the function as a reference in a transaction. Any function called in a\nTransaction has access to the context and can pass it into\nthe nested calls.\n\n\nTxContext has to be the last argument in the function signature.\n\n\n**Reading the Transaction Context**\n\nWith only exception of the ids_created, all of the fields in the TxContext have getters. The\ngetters are defined in the sui::tx_context module and are available to the program. The getters\ndon't require &mut because they don't modify the context.\n\n````movepublic fun some_action(ctx: &TxContext) {\n    let me = ctx.sender();\n    let epoch = ctx.epoch();\n    let digest = ctx.digest();\n    // ...\n}\n````\n\n**Mutability**\n\nThe TxContext is required to create new objects (or just UIDs) in the system. New UIDs are\nderived from the transaction digest, and for the digest to be unique, there needs to be a changing\nparameter. Sui uses the ids_created field for that. Every time a new UID is created, the\nids_created field is incremented by one. This way, the digest is always unique.\n\nInternally, it is represented as the derive_id function:\n\n````move// File: sui-framework/sources/tx_context.move\nnative fun derive_id(tx_hash: vector<u8>, ids_created: u64): address;\n````\n\n**Generating unique addresses**\n\nThe underlying derive_id function can also be utilized in your program to generate unique\naddresses. The function itself is not exposed, but a wrapper function fresh_object_address is\navailable in the sui::tx_context module. It may be useful if you need to generate a unique\nidentifier in your program.\n\n````move// File: sui-framework/sources/tx_context.move\n/// Create an `address` that has not been used. As it is an object address, it will never\n/// occur as the address for a user.\n/// In other words, the generated address is a globally unique object ID.\npublic fun fresh_object_address(ctx: &mut TxContext): address {\n    let ids_created = ctx.ids_created;\n    let id = derive_id(*&ctx.tx_hash, ids_created);\n    ctx.ids_created = ids_created + 1;\n    id\n}\n````\n\n"}]}
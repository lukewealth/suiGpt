{"messages": [{"role": "system", "content": "SuiAI is a chat agent that’s proficient in the Move smart contract language"}, {"role": "user", "content": "How do i print to the console in the sui move programming language?."}, {"role": "assistant", "content": "**Print**\n\nTo print out a value in the move language, you can use the print method from the debug module in the move standard library (`std::debug::print`\n)\n````movemodule example::print_method {\n\n//  Import necessary dependencies\nuse std::debug;\n\n/* declare constants if necessary */\nconst EZeroValueNotAllowed:u64 = 1;\n\n\npublic fun print_val (value:u64){\n    assert!(value > 0,EZeroValueNotAllowed);\n    debug::print(&value)\n}\n\n\n#[test]\nfun test_print(){\n    print_val(4)\n}\n\n}````\n\nThis function above will print any value passed into the print_val function. Run `sui move test`\n to run the code\n"}]}
{"messages": [{"role": "system", "content": "SuiAI is a chat agent that’s proficient in the Move smart contract language"}, {"role": "user", "content": "How do i declare a module in the sui move programming language?."}, {"role": "assistant", "content": "# Module\n\nA Module is the base unit of code organization in Move. Modules are used to group and isolate code, and all of the members of the module are private to the module by default.\n## Module declaration\nv\nModules are declared using the **module**\n keyword followed by the package address, module name and the module body inside the curly braces **{}**\n. The module name should be in snake_case - all lowercase letters with underscores between words. Modules names must be unique in the package.\nUsually, a single file in the **sources/**\n */ folder contains a single module. The file name should match the module name - for example, a **donut_shop**\n module should be stored in the **donut_shop.move**\n file. You can read more about coding conventions in the [Coding Conventions](https://move-book.com/special-topics/coding-conventions.html) section.\nStructs, functions, constants and imports all part of the module:\n* Structs\n\n* Functions\n\n* Constants\n\n* Imports\n\n* Struct Methods\n\n## Module Members\n\n[](#module-members)\nModule members are declared inside the module body. To illustrate that, let's define a simple module with a struct, a function and a constant:\n````movemodule book::my_module_with_members {\n    // import\n    use book::my_module;\n\n    // a constant\n    const CONST: u8 = 0;\n\n    // a struct\n    public struct Struct {}\n\n    // function\n    fun function(_: &Struct) { /* function body */ }\n}````\n\n"}]}